# 按CPU数量绑定worker进程
worker_processes  auto;

events {
    #引擎模式，epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
    use epoll;

    #单个后台worker process进程的最大并发链接数
    worker_connections  65535;

    multi_accept on;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile      on;
    server_tokens  off;

    # 打开 tcp_nopush 选项，Nginux 允许将 HTTP 应答首部与数据内容在同一个报文中发出。
    # 这个选项使服务器在 sendfile 时可以提前准备 HTTP 首部，能够达到优化吞吐的效果。
    tcp_nopush on;

    # 允许服务器在客户端停止发送应答之后关闭连接，以便释放连接相应的 socket 内存开销。
    reset_timedout_connection on;

    charset  UTF-8;

    # servername的哈希表大小。
    server_names_hash_bucket_size 128;

    keepalive_timeout  20;

    # 错误级别：debug、info、notice、warn、error、crit
    access_log /var/log/nginx/access.log;
    error_log  /var/log/nginx/error.log debug;

    gzip  on;
    gzip_disable "MSIE [1-6]";
    #置对数据启用压缩的最少字节数，单位为bytes。如果一个请求小于1000字节，我们最好不要压缩它，因为压缩这些小的数据会降低处理此请求的所有进程的速度。
    gzip_min_length 1024;
    #设置数据的压缩等级。这个等级可以是1-9之间的任意数值，1为最小化压缩（处理速度快），9为最大化压缩（处理速度慢）。
    gzip_comp_level 8;
    gzip_vary on;
    gzip_types application/javascript application/json application/x-javascript application/xml text/css text/javascript text/plain text/xml;


    include /etc/nginx/conf.d/*.conf;

    # 默认设置，禁止ip访问和非指定域名访问
    server {
        listen 80 default;
        server_name _;

        return 444;
    }

    server {
        listen 443 default;
        server_name _;

        ssl                         on;
        ssl_certificate             /etc/ssl/server.crt;#配置证书位置
        ssl_certificate_key         /etc/ssl/server.key;#配置秘钥位置
        ssl_password_file           /etc/ssl/ssl.pass;
        #ssl_client_certificate ca.crt;#双向认证
        #ssl_verify_client on; #双向认证
        ssl_session_cache           shared:SSL:10m;
        ssl_session_timeout         10m;
        ssl_protocols               SSLv2 SSLv3 TLSv1;
        ssl_ciphers                 ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
        ssl_prefer_server_ciphers   on;

        return 444;
    }
}
